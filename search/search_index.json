{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hidden Cavern Exploration - Documentation","text":""},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    codepage.md  # The documentation for the code created page\n    testpage.md # The documentation for the test code page\n</code></pre> <p>For full documentation visit mkdocs.org.</p>"},{"location":"codepage/","title":"Code Annotations","text":""},{"location":"codepage/#the-cave-class","title":"The Cave class","text":"<p>This creates and intialises a cave object, if the level isn't entered it begins at 0</p> Source code in <code>src/cave.py</code> <pre><code>class Cave:\n    \"\"\"This creates and intialises a cave object, if the level isn't entered it begins at 0\"\"\"\n\n    def __init__(self, cave_name, cave_type, level = 0):\n        '''\n        Returns the string for a Cave object\n\n            Parameters:\n                self (cave): An object of the class cave\n                cave_name (str): String for the cave's name\n                cave_type (str): String for the cave type\n                level (int): Integer for the cave floor\n\n            Returns:\n                Object (cave): Creating the cave object\n        '''\n        self.cave_name = cave_name\n        self.cave_type = cave_type\n        self.level = level\n\n    #Just prints the default statement where player is to be used when they enter a cave\n    def __repr__(self):\n        '''\n        Returns the string for a Cave object\n\n            Parameters:\n                self (cave): An object of the class cave\n\n            Returns:\n                String (str): String representation of Cave\n        '''\n        return f\"Player has entered: {self.cave_name} and \\\nit's a {self.cave_type} themed cave\\nStarting on Floor: {self.level}\"\n\n    def cave_depth(self, level):\n        '''\n        Returns the string for a Cave object\n\n            Parameters:\n                self (cave): An object of the class cave\n                level (int): A decimal interger representing the floor level\n\n            Returns:\n                String (str): Outputs the current floor to player their on with unique message\n        '''\n        if level &gt; self.level:\n            self.level = level\n            return f\"Player has moved up to Floor {level}\"\n\n        if level &lt; self.level:\n            self.level = level\n            return f\"Player has moved down to Floor {level}\"\n\n        return f\"Player is currently still on Floor {level}\"\n</code></pre>"},{"location":"codepage/#src.cave.Cave.__init__","title":"<code>__init__(cave_name, cave_type, level=0)</code>","text":"<p>Returns the string for a Cave object</p> <pre><code>Parameters:\n    self (cave): An object of the class cave\n    cave_name (str): String for the cave's name\n    cave_type (str): String for the cave type\n    level (int): Integer for the cave floor\n\nReturns:\n    Object (cave): Creating the cave object\n</code></pre> Source code in <code>src/cave.py</code> <pre><code>def __init__(self, cave_name, cave_type, level = 0):\n    '''\n    Returns the string for a Cave object\n\n        Parameters:\n            self (cave): An object of the class cave\n            cave_name (str): String for the cave's name\n            cave_type (str): String for the cave type\n            level (int): Integer for the cave floor\n\n        Returns:\n            Object (cave): Creating the cave object\n    '''\n    self.cave_name = cave_name\n    self.cave_type = cave_type\n    self.level = level\n</code></pre>"},{"location":"codepage/#src.cave.Cave.__repr__","title":"<code>__repr__()</code>","text":"<p>Returns the string for a Cave object</p> <pre><code>Parameters:\n    self (cave): An object of the class cave\n\nReturns:\n    String (str): String representation of Cave\n</code></pre> Source code in <code>src/cave.py</code> <pre><code>    def __repr__(self):\n        '''\n        Returns the string for a Cave object\n\n            Parameters:\n                self (cave): An object of the class cave\n\n            Returns:\n                String (str): String representation of Cave\n        '''\n        return f\"Player has entered: {self.cave_name} and \\\nit's a {self.cave_type} themed cave\\nStarting on Floor: {self.level}\"\n</code></pre>"},{"location":"codepage/#src.cave.Cave.cave_depth","title":"<code>cave_depth(level)</code>","text":"<p>Returns the string for a Cave object</p> <pre><code>Parameters:\n    self (cave): An object of the class cave\n    level (int): A decimal interger representing the floor level\n\nReturns:\n    String (str): Outputs the current floor to player their on with unique message\n</code></pre> Source code in <code>src/cave.py</code> <pre><code>def cave_depth(self, level):\n    '''\n    Returns the string for a Cave object\n\n        Parameters:\n            self (cave): An object of the class cave\n            level (int): A decimal interger representing the floor level\n\n        Returns:\n            String (str): Outputs the current floor to player their on with unique message\n    '''\n    if level &gt; self.level:\n        self.level = level\n        return f\"Player has moved up to Floor {level}\"\n\n    if level &lt; self.level:\n        self.level = level\n        return f\"Player has moved down to Floor {level}\"\n\n    return f\"Player is currently still on Floor {level}\"\n</code></pre>"},{"location":"testpage/","title":"Test Annotations","text":""},{"location":"testpage/#the-tester-for-the-cave-class","title":"The tester for the cave class","text":""},{"location":"testpage/#src.test.test_cave_default_init","title":"<code>test_cave_default_init()</code>","text":"<p>Test if the default initialisation of Cave works</p> Source code in <code>src/test.py</code> <pre><code>def test_cave_default_init():\n    \"\"\"Test if the default initialisation of Cave works\"\"\"\n    caves = Cave(\"Temple\",\"Fire\")\n    assert caves.cave_name == \"Temple\" and caves.cave_type == \"Fire\" and caves.level == 0\n</code></pre>"},{"location":"testpage/#src.test.test_cave_depth","title":"<code>test_cave_depth()</code>","text":"<p>Test if the messages changes based on the Cave level</p> Source code in <code>src/test.py</code> <pre><code>def test_cave_depth():\n    \"\"\"Test if the messages changes based on the Cave level\"\"\"\n    caves = Cave(\"a\",\"f\",3)\n    assert Cave.cave_depth(caves,4) == \"Player has moved up to Floor 4\"\n</code></pre>"},{"location":"testpage/#src.test.test_cave_init","title":"<code>test_cave_init()</code>","text":"<p>Test if the initialisation of Cave works with the value of floor</p> Source code in <code>src/test.py</code> <pre><code>def test_cave_init():\n    \"\"\"Test if the initialisation of Cave works with the value of floor\"\"\"\n    caves = Cave(\"Tomb\",\"Aztec\",4)\n    assert caves.cave_name == \"Tomb\" and caves.cave_type == \"Aztec\" and caves.level == 4\n</code></pre>"},{"location":"testpage/#src.test.test_cave_repr","title":"<code>test_cave_repr()</code>","text":"<p>Test if the string representation of Cave works</p> Source code in <code>src/test.py</code> <pre><code>def test_cave_repr():\n    \"\"\"Test if the string representation of Cave works\"\"\"\n    caves = Cave(\"a\",\"b\")\n    assert f\"{caves}\" == \"Player has entered: a and it's a b themed cave\\nStarting on Floor: 0\"\n</code></pre>"}]}